{"version":3,"sources":["images/bg-desktop-dark.jpg","images/bg-desktop-light.jpg","components/BackgroundImage.js","store/actions.js","images/icon-sun.svg","images/icon-moon.svg","components/SwitchTheme.js","components/InputField.js","images/icon-cross.svg","components/List.js","components/HandlerEvent.js","components/ListContainer.js","components/TodoBox.js","App.js","store/reducers.js","reportWebVitals.js","index.js"],"names":["BackgroundImage","isDarked","className","src","darkImageDesktop","lightImageDesktop","alt","todoId","label","dispatch","type","payload","id","checked","SwitchTheme","rest","useDispatch","sun","moon","onClick","actions","InputField","useState","input","setInput","placeholder","onChange","evt","target","value","onKeyDown","key","List","todoList","handleCheck","listItem","parentNode","document","querySelector","classList","contains","add","remove","handleDelete","RemoveBtn","dataId","bind","data-id","cross","Item","isCompleted","defaultChecked","length","map","todo","Counter","todoNumber","Status","updateType","buttons","querySelectorAll","resetButton","forEach","button","Object","updateButtonFocus","event","Clear","HandlerEvent","ListContainer","showType","setShowType","todoListDisplay","setTodoListDisplay","useEffect","filter","TodoBox","props","connect","state","item","toggleTheme","html","initialTodo","action","newState","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d88db04e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg-desktop-dark.73e47dbb.jpg\";","export default __webpack_public_path__ + \"static/media/bg-desktop-light.3508d620.jpg\";","import darkImageDesktop from '../images/bg-desktop-dark.jpg';\r\nimport lightImageDesktop from '../images/bg-desktop-light.jpg';\r\n\r\nconst BackgroundImage = ({isDarked}) => {\r\n\r\n\r\n    return (\r\n        <div className=\"imagebox w-full absolute top-0 left-0\">\r\n            <img src={isDarked ? darkImageDesktop : lightImageDesktop} alt={isDarked ? 'hallway' : 'mountain'} className=\"w-full\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BackgroundImage;","let todoId = 0;\r\n\r\nconst addTodo = (label) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'ADD_TODO',\r\n            payload: {\r\n                id: ++todoId,\r\n                label: label\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst toggleTodo = (id, checked) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'TOGGLE_TODO',\r\n            payload: {\r\n                id: id,\r\n                checked: checked\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst toggleTheme = () => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'TOGGLE_THEME'\r\n        })\r\n    }\r\n}\r\n\r\nconst deleteTodo = (id) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'DELETE_TODO',\r\n            payload: {\r\n                id: id,\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst clearCompleted = () => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'CLEAR_COMPLETED',\r\n        })\r\n    }\r\n}\r\n\r\nexport default {\r\n    addTodo,\r\n    toggleTodo,\r\n    deleteTodo,\r\n    toggleTheme,\r\n    clearCompleted\r\n}","export default __webpack_public_path__ + \"static/media/icon-sun.910b1f9a.svg\";","export default __webpack_public_path__ + \"static/media/icon-moon.6c03114b.svg\";","import { useDispatch } from 'react-redux';\r\nimport actions from '../store/actions'\r\n\r\nimport sun from '../images/icon-sun.svg';\r\nimport moon from '../images/icon-moon.svg';\r\n\r\n\r\nconst SwitchTheme = ({isDarked, ...rest}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    function themeChange() {\r\n        dispatch(actions.toggleTheme())\r\n    }\r\n\r\n    return (\r\n        <div {...rest}>\r\n            <img src={isDarked ? sun : moon} alt={isDarked ? 'Sun' : 'Moon'} onClick={themeChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SwitchTheme;","import { useDispatch } from 'react-redux';\r\nimport React, { useState } from 'react';\r\nimport actions from '../store/actions'\r\n\r\n\r\nconst InputField = ({...rest}) => {\r\n    const dispatch = useDispatch()\r\n    const [input, setInput] = useState('');\r\n\r\n    function handleChange(evt) {\r\n        setInput(evt.target.value)\r\n    }\r\n\r\n    function handleKeyDown(evt) {\r\n        if(evt.key === 'Enter') {\r\n            dispatch(actions.addTodo(input))\r\n            evt.target.value = '';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div {...rest}>\r\n            <input type=\"text\" placeholder=\"Create a new todo...\" className=\"font-josefin w-full text-light-dgb dark:text-dark-dgb placeholder-light-lgb dark:placeholder-dark-dgb font-bold bg-light-vlg dark:bg-dark-vddb py-4 pl-16\" onChange={handleChange} onKeyDown={handleKeyDown} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputField;","export default __webpack_public_path__ + \"static/media/icon-cross.6ee81d30.svg\";","import { useDispatch } from 'react-redux';\r\n\r\nimport actions from '../store/actions'\r\nimport cross from '../images/icon-cross.svg'\r\n\r\nconst List = ({todoList}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    function handleCheck(evt) {\r\n        const listItem = evt.target.parentNode\r\n        \r\n\r\n        if( document.querySelector('html').classList.contains('dark') ) {\r\n            if( evt.target.checked ) {\r\n                listItem.querySelector('.label').classList.add('line-through', 'text-dark-vdgb')\r\n                listItem.querySelector('.label').classList.remove('text-dark-lgb')\r\n                listItem.parentNode.querySelector('button').classList.add('hidden')\r\n            } else {\r\n                listItem.querySelector('.label').classList.remove('line-through', 'text-dark-vdgb')\r\n                listItem.querySelector('.label').classList.add('text-dark-lgb')\r\n                listItem.parentNode.querySelector('button').classList.remove('hidden')\r\n            }\r\n        } else {\r\n            if( evt.target.checked ) {\r\n                listItem.querySelector('.label').classList.add('line-through')\r\n                listItem.parentNode.querySelector('button').classList.add('hidden')\r\n            } else {\r\n                listItem.querySelector('.label').classList.remove('line-through')\r\n                listItem.parentNode.querySelector('button').classList.remove('hidden')\r\n            }\r\n        }\r\n\r\n        dispatch(actions.toggleTodo(evt.target.id, evt.target.checked))\r\n\r\n    }\r\n\r\n    function handleDelete(id) {\r\n        dispatch(actions.deleteTodo(id))\r\n    }\r\n\r\n    function RemoveBtn({dataId}) {\r\n        return (\r\n            <button className=\"button-close flex-shrink\" onClick={handleDelete.bind(null, dataId)} data-id={dataId}>\r\n                <img src={cross} alt=\"Cross\" />\r\n            </button>\r\n        )\r\n    }\r\n\r\n    function Item({id, label, isCompleted}) {\r\n        return (\r\n            <li className=\"list-item w-full relative font-josefin w-full bg-light-vlg dark:bg-dark-vddb pr-6 text-left flex item-center border-light-vlg dark:border-dark-vdgb\">\r\n                \r\n                <label className=\"text-base flex-auto py-4 pl-16 cursor-pointer\">\r\n                    <span className={`label text-light-vdgb dark:text-dark-lgb text-lg font-josefin ${isCompleted && 'line-through'}`}>{label}</span>\r\n                    <input id={id} type=\"checkbox\" onChange={handleCheck} defaultChecked={isCompleted}/>\r\n                    <span className=\"checkmark\"></span>\r\n                </label>\r\n\r\n                <RemoveBtn dataId={id} />\r\n            </li>\r\n        )\r\n    }\r\n\r\n    if( todoList.length !== 0 )\r\n\r\n        return  (\r\n            <ul>\r\n                {todoList.map(todo => {\r\n                    return <Item key={todo.id} id={todo.id} isCompleted={todo.isCompleted} label={todo.label} />\r\n                })}\r\n            </ul>\r\n        )\r\n\r\n    return <p className=\"text-dark-dgb font-josefin font-bold pt-5\">No Data Found.</p>\r\n}\r\n\r\nexport default List;","import { useDispatch } from 'react-redux';\r\nimport actions from '../store/actions'\r\n\r\n\r\nconst Counter = ({todoNumber, className}) => {\r\n    return  (\r\n        <span className={`text-light-lgb dark:text-dark-vdgb font-josefin text-sm font-bold ${className}`}>{todoNumber} items left</span>\r\n    )\r\n}\r\n\r\nconst Status = ({className, updateType}) => {\r\n    const buttons = document.querySelectorAll('.statusbox button')\r\n\r\n    function resetButton() {\r\n        buttons.forEach(button => {\r\n            Object(button).classList.remove('text-brightBlue')\r\n            Object(button).classList.add('text-light-dgb', 'dark:text-dark-dgb')\r\n        })\r\n    }\r\n    \r\n    const updateButtonFocus = (event) => {\r\n        event.target.classList.add('text-brightBlue')\r\n        event.target.classList.remove('text-light-dgb', 'dark:text-dark-dgb')\r\n    }\r\n\r\n    const buttonAll = event => {\r\n        resetButton()\r\n        updateButtonFocus(event)\r\n        updateType('all')\r\n    }\r\n\r\n    const buttonActive = event => {\r\n        resetButton()\r\n        updateButtonFocus(event)\r\n        updateType('active')\r\n\r\n    }\r\n\r\n    const buttonCompleted = event => {\r\n        resetButton()\r\n        updateButtonFocus(event)\r\n        updateType('completed')\r\n    }\r\n\r\n    return (\r\n        <div className={`statusbox text-center ${className}`}>\r\n            <button className=\"font-josefin px-2.5 text-sm font-bold text-brightBlue\" onClick={buttonAll.bind(this)}>All</button>\r\n            <button className=\" text-light-dgb dark:text-dark-dgb font-josefin px-2.5 text-sm font-bold\" onClick={buttonActive.bind(this)}>Active</button>\r\n            <button className=\" text-light-dgb dark:text-dark-dgb font-josefin px-2.5 text-sm font-bold\" onClick={buttonCompleted.bind(this)}>Completed</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Clear = ({className}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    \r\n    function clearHandler() {\r\n        dispatch(actions.clearCompleted())\r\n    }\r\n\r\n    return (\r\n        <button className=\" font-josefin text-light-lgb dark:text-dark-vdgb text-sm font-bold\" onClick={clearHandler}>Clear Completed</button>\r\n    )\r\n}\r\n\r\nconst HandlerEvent = ({todoNumber, updateType}) => {\r\n    return (\r\n        <div className=\"w-full flex items-center py-4 px-5\">\r\n            <Counter className=\"justify-items-stretch\" todoNumber={todoNumber} />\r\n            <Status className=\"justify-items-stretch flex-auto\" updateType={updateType} />\r\n            <Clear className=\"justify-items-stretch\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HandlerEvent;","\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport List from './List';\r\nimport HandlerEvent from './HandlerEvent';\r\n\r\nconst ListContainer = ({todoNumber, todoList, ...rest}) => {\r\n    const [showType, setShowType] = useState('all')\r\n    const [todoListDisplay, setTodoListDisplay] = useState([])\r\n\r\n    useEffect(() => {\r\n        \r\n        \r\n        if(showType === 'active') setTodoListDisplay(todoList.filter(todo => !todo.isCompleted))\r\n        else if(showType === 'completed') setTodoListDisplay(todoList.filter(todo => todo.isCompleted))\r\n        else if(showType === 'all') setTodoListDisplay(todoList)\r\n\r\n    }, [showType, todoList])\r\n\r\n    function updateType(type) {\r\n        setShowType(type)\r\n    }\r\n\r\n    return (\r\n        <div {...rest}>\r\n            <List todoList={todoListDisplay}/>\r\n            <HandlerEvent todoNumber={todoNumber} updateType={updateType} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListContainer;","import SwitchTheme from './SwitchTheme';\r\nimport InputField from './InputField';\r\nimport ListContainer from './ListContainer';\r\n\r\nconst TodoBox = ({props}) => {\r\n    return(\r\n        <div className=\"w-2/5 px-5 m-auto relative pt-20\">\r\n            <div className=\"flex items-center w-full mb-10\">\r\n                <h1 className=\"text-white tracking-widestx3 font-josefin text-4xl text-left font-bold flex-auto\">TODO</h1>\r\n                <SwitchTheme className=\"flex-shrink\" isDarked={props.isDarked} />\r\n            </div>\r\n\r\n            <InputField className=\" circle-design relative w-full bg-light-vlg dark:bg-dark-vddb rounded overflow-hidden mb-8\" />\r\n\r\n            <ListContainer todoNumber={props.todoNumber} todoList={props.todoList} className=\"list-container relative w-full bg-light-vlg dark:bg-dark-vddb rounded overflow-hidden\" />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoBox;","import React, {useEffect} from 'react';\nimport BackgroundImage from './components/BackgroundImage';\nimport TodoBox from './components/TodoBox';\nimport { connect } from 'react-redux';\n\nimport actions from './store/actions'\nimport './App.css';\n\nfunction App(props) {\n\n  useEffect(() => {\n      const html = document.querySelector('html').classList\n      if(!props.isDarked) html.remove('dark')\n      else html.add('dark')\n\n  }, [props.isDarked])\n\n  return (\n  <div className=\"App bg-light-vlg h-screen dark:bg-dark-vdb\">\n      <BackgroundImage isDarked={props.isDarked} />\n      <TodoBox props={props} />\n  </div>\n  );\n}\n\nconst mapStateToProps = function(state) {\n    return {\n        todoList: state.todoList,\n        todoNumber: state.todoList.filter(item => !item.isCompleted ).length,\n        isDarked: state.isDarked\n    }\n}\n\nconst mapDispatchToProps = function(dispatch) {\n    return {\n        toggleTheme : actions.toggleTheme()\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const initialTodo = {\r\n    isDarked: true,\r\n    todoList: [],\r\n}\r\n\r\nconst todo = (state = initialTodo, action) => {\r\n    switch(action.type) {\r\n\r\n        case 'ADD_TODO' : {\r\n            const {id, label} = action.payload\r\n            return {\r\n                ...state,\r\n                todoList: [\r\n                    ...state.todoList,\r\n                    {\r\n                        id: id,\r\n                        label: label,\r\n                        isCompleted: false\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n\r\n        case 'TOGGLE_TODO': {\r\n            const {id, checked} = action.payload\r\n            const newState = state.todoList.map((todo) => {\r\n                if(todo.id === parseInt(id)) {\r\n                    return { id: parseInt(id), label: todo.label, isCompleted: checked}\r\n                }\r\n                \r\n                return todo\r\n            })\r\n            return {\r\n                ...state,\r\n                todoList: [\r\n                    ...newState\r\n                ]\r\n            }\r\n        }\r\n\r\n        case 'DELETE_TODO': {\r\n            const {id} = action.payload\r\n            const newState = state.todoList.filter( todo => todo.id !== parseInt(id) )\r\n            return {\r\n                ...state,\r\n                todoList: [\r\n                    ...newState\r\n                ]\r\n            }\r\n        }\r\n\r\n        case 'CLEAR_COMPLETED' : {\r\n            const newState = state.todoList.filter( todo => !todo.isCompleted)\r\n            return {\r\n                ...state,\r\n                todoList: [\r\n                    ...newState\r\n                ]\r\n            }\r\n        }\r\n\r\n        case 'TOGGLE_THEME' : {\r\n            return {\r\n                ...state,\r\n                isDarked : !state.isDarked\r\n            }\r\n        }\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default todo","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from './store/reducers';\nimport { Provider } from 'react-redux';\nimport thunk from \"redux-thunk\";\n\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk) );\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}